//
//  DetailsViewController.swift
//  Pokedex
//
//  Created by Javier Paez Arcos on 30/08/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher


protocol DetailsViewControllerDelegate {
    func displayTypeString(typeString: String)
}

protocol DetailsDisplayLogic: AnyObject
{
    func displayBackToSearchByTypeString(viewModel: Details.BackToSearchByTypeSelected.ViewModel)
}

class DetailsViewController: UIViewController, DetailsDisplayLogic {
    var interactor: DetailsBusinessLogic?
    var router: (NSObjectProtocol & DetailsRoutingLogic & DetailsDataPassing)?
    var delegate: DetailsViewControllerDelegate?
    
    let detailsView = DetailsView()

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: - Setup Clean Code Design Pattern 

    private func setup() {
        let viewController = self
        let interactor = DetailsInteractor()
        let presenter = DetailsPresenter()
        let router = DetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: - Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: - View lifecycle
    
    
    
    override func loadView() {
        super.loadView()
        view = detailsView
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        
        
        let pokemonData = router?.dataStore?.pokemonData
        
        detailsView.numberLabel.text = "#\(String(format: "%03d", pokemonData!.pokemonSelected.id as! CVarArg))"
        
        title = pokemonData!.pokemonEntry.name.capitalized
        
        navigationController?.navigationBar.barStyle = UIBarStyle.default
        navigationController?.navigationBar.tintColor = UIColor.black
        
        
        detailsView.colorView.backgroundColor = Utils.TypeColors[pokemonData!.pokemonSelected.types[0].type.name]
        guard let url = URL(string: (pokemonData?.pokemonSelected.sprites.front_default)!) else { return }
        detailsView.pokeballbg.kf.setImage(with: url)
        
        
        navigationController?.navigationBar.largeTitleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor.white]
        
        
        detailsView.detailsCollectionView.delegate = self
        detailsView.detailsCollectionView.dataSource = self
    }
    
    // MARK: - request data from DetailsInteractor

    func backToSearchBy(type: String) {
        let request = Details.BackToSearchByTypeSelected.Request(typeString: type)
        delegate?.displayTypeString(typeString: type)
        interactor?.backToSearchByType(request: request)
    }

    // MARK: - display view model from DetailsPresenter

    func displayBackToSearchByTypeString(viewModel: Details.BackToSearchByTypeSelected.ViewModel) {
        self.router?.routeToHome()
    }
}
